(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{348:function(s,n,t){"use strict";t.r(n);var a=t(0),e=Object(a.a)({},(function(){var s=this,n=s.$createElement,t=s._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"array-prototype-flat、flatmap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-flat、flatmap"}},[s._v("#")]),s._v(" Array.prototype.flat、flatMap")]),s._v(" "),t("p",[s._v("flat方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回，\nflatMap()与map()方法合深度为1的flat()几乎相同，不过它会首先使用映射函数映射每个元素，然后将结果压缩成一个新数组，这样效率会更高\n例子如下:")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("var arr1=[1,2,3,4]// [[2], [4], [6], [8]]\n\n\narr1.map(x=>[x*2])// [2, 4, 6, 8]\n// 深度为1\narr1.flatMap(x => [[x * 2]]) // [[2], [4], [6], [8]]\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("flatmap()可以代替reduce和concat()，例子如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("var arr = [1, 2, 3, 4]\narr.flatMap(x => [x, x * 2]) // [1, 2, 2, 4, 3, 6, 4, 8]\n// 等价于\narr.reduce((acc, x) => acc.concat([x, x * 2]), []) // [1, 2, 2, 4, 3, 6, 4, 8]\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h1",{attrs:{id:"string-prototype-trimstart-trimleft-trimend-trimright"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-trimstart-trimleft-trimend-trimright"}},[s._v("#")]),s._v(" String.prototype.trimStart() / trimLeft() / trimEnd() / trimRight()")]),s._v(" "),t("p",[s._v("在ES5中，我们可以通过trim()来去掉字符首尾的空格，但是却无法只去掉单边的，但是在ES10之后，我们可以实现这个功能。\n如果我们要去掉开头的空格，可以使用trimStart()或者它的别名trimLeft()，\n同样的，如果我们要去掉结尾的空格，我们可以使用trimEnd()或者它的别名trimRight()。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const Str = '   Hello world!  '\nconsole.log(Str) // '   Hello world!  '\nconsole.log(Str.trimStart()) // 'Hello world!  '\nconsole.log(Str.trimLeft()) // 'Hello world!  '\nconsole.log(Str.trimEnd()) // '   Hello world!'\nconsole.log(Str.trimRight()) // '   Hello world!'\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("不过这里有一点要注意的是，trimStart()跟trimEnd()才是标准方法，trimLeft()跟trimRight()只是别名。")]),s._v(" "),t("p",[s._v("在某些引擎里（例如Chrome），有以下的等式：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('String.prototype.trimLeft.name === "trimStart"\n\nString.prototype.trimRight.name === "trimEnd"\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h1",{attrs:{id:"object-fromentries"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object-fromentries"}},[s._v("#")]),s._v(" Object.fromEntries()")]),s._v(" "),t("p",[s._v("Object.fromEntries() 方法把键值对列表转换为一个对象，它是Object.entries()的反函数。")]),s._v(" "),t("p",[s._v("例子如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const entries = new Map([\n  ['foo', 'bar'],\n  ['baz', 42]\n])\n\nconst obj = Object.fromEntries(entries)\n\nconsole.log(obj) // Object { foo: \"bar\", baz: 42 }\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("h1",{attrs:{id:"symbol-prototype-description"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#symbol-prototype-description"}},[s._v("#")]),s._v(" Symbol.prototype.description")]),s._v(" "),t("p",[s._v("description 是一个只读属性，它会返回Symbol对象的可选描述的字符串。与 Symbol.prototype.toString() 不同的是它不会包含Symbol()的字符串。例子如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('Symbol(\'desc\').toString();   // "Symbol(desc)"\nSymbol(\'desc\').description;  // "desc"\nSymbol(\'\').description;      // ""\nSymbol().description;        // undefined\n\n// 具名 symbols\nSymbol.iterator.toString();  // "Symbol(Symbol.iterator)"\nSymbol.iterator.description; // "Symbol.iterator"\n\n//全局 symbols\nSymbol.for(\'foo\').toString();  // "Symbol(foo)"\nSymbol.for(\'foo\').description; // "foo"\n\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("h1",{attrs:{id:"string-prototype-matchall"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-matchall"}},[s._v("#")]),s._v(" String.prototype.matchAll")]),s._v(" "),t("p",[s._v("matchAll() 方法返回一个包含所有匹配正则表达式的结果及分组捕获组的迭代器。并且返回一个不可重启的迭代器。例子如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("var regexp = /t(e)(st(\\d?))/g\nvar str = 'test1test2'\n\nstr.match(regexp) // ['test1', 'test2']\nstr.matchAll(regexp) // RegExpStringIterator {}\n[...str.matchAll(regexp)] // [['test1', 'e', 'st1', '1', index: 0, input: 'test1test2', length: 4], ['test2', 'e', 'st2', '2', index: 5, input: 'test1test2', length: 4]]\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("h1",{attrs:{id:"function-prototype-tostring-返回注释与空格"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#function-prototype-tostring-返回注释与空格"}},[s._v("#")]),s._v(" Function.prototype.toString() 返回注释与空格")]),s._v(" "),t("p",[s._v("在以往的版本中，Function.prototype.toString()得到的字符串是去掉空白符号的，但是从ES10开始会保留这些空格，如果是原生函数则返回你控制台看到的效果，例子如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('function sum(a, b) {\n      return a + b;\n}\n\nconsole.log(sum.toString())\n// "function sum(a, b) {\n// \t\treturn a + b;\n//  }"\n\nconsole.log(Math.abs.toString()) // "function abs() { [native code] }"\n\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("h1",{attrs:{id:"try-catch"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#try-catch"}},[s._v("#")]),s._v(" try-catch")]),s._v(" "),t("p",[s._v("在以往的版本中，try-catch里catch后面必须带异常参数，例如：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("    // ES10之前\ntry {\n      // tryCode\n} catch (err) {\n      // catchCode\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("但是在ES10之后，这个参数却不是必须的，如果用不到，我们可以不用传，例如：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("try {\n      console.log('Foobar')\n} catch {\n      console.error('Bar')\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h1",{attrs:{id:"bigint"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bigint"}},[s._v("#")]),s._v(" BigInt")]),s._v(" "),t("p",[s._v("BigInt 是一种内置对象，它提供了一种方法来表示大于 253 - 1 的整数。这原本是 Javascript中可以用 Number 表示的最大数字。BigInt 可以表示任意大的整数。\n可以用在一个整数字面量后面加 n 的方式定义一个 BigInt ，如：10n，或者调用函数BigInt()。\n在以往的版本中，我们有以下的弊端：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("// 大于2的53次方的整数，无法保持精度\n2 ** 53 === (2 ** 53 + 1)\n// 超过2的1024次方的数值，无法表示\n2 ** 1024 // Infinity\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("但是在ES10引入BigInt之后，这个问题便得到了解决。\n以下操作符可以和 BigInt 一起使用： +、*、-、**、% 。除 >>> （无符号右移）之外的位操作也可以支持。因为 BigInt 都是有符号的， >>> （无符号右移）不能用于 BigInt。BigInt 不支持单目 (+) 运算符。\n/ 操作符对于整数的运算也没问题。可是因为这些变量是 BigInt 而不是 BigDecimal ，该操作符结果会向零取整，也就是说不会返回小数部分。\nBigInt 和 Number不是严格相等的，但是宽松相等的。\n所以在BigInt出来以后，JS的原始类型便增加到了7个，如下：")]),s._v(" "),t("p",[s._v("Boolean\nNull\nUndefined\nNumber\nString\nSymbol (ES6)\nBigInt (ES10)")]),s._v(" "),t("h1",{attrs:{id:"globalthis"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#globalthis"}},[s._v("#")]),s._v(" globalThis")]),s._v(" "),t("p",[s._v("globalThis属性包含类似于全局对象 this值。所以在全局环境下，我们有：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("globalThis === this // true\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h1",{attrs:{id:"import"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#import"}},[s._v("#")]),s._v(" import()")]),s._v(" "),t("p",[s._v('静态的import 语句用于导入由另一个模块导出的绑定。无论是否声明了 严格模式，导入的模块都运行在严格模式下。在浏览器中，import 语句只能在声明了 type="module" 的 script 的标签中使用。\n但是在ES10之后，我们有动态 import()，它不需要依赖 type="module" 的script标签。\n所以我们有以下例子')]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('const main = document.querySelector("main")\nfor (const link of document.querySelectorAll("nav > a")) {\n      link.addEventListener("click", e => {\n            e.preventDefault()\n\n            import(\'/modules/my-module.js\')\n              .then(module => {\n                    module.loadPageInto(main);\n              })\n              .catch(err => {\n                    main.textContent = err.message;\n              })\n      })\n}\n\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("h1",{attrs:{id:"私有元素和方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#私有元素和方法"}},[s._v("#")]),s._v(" 私有元素和方法")]),s._v(" "),t("p",[s._v("在ES10之前，如果我们要实现一个简单的计数器组件，我们可能会这么写：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("// web component 写法\nclass Counter extends HTMLElement {\n      get x() { \n          \treturn this.xValue\n      }\n      set x(value) {\n              this.xValue = value\n              window.requestAnimationFrame(this.render.bind(this))\n      }\n\n      clicked() {\n            this.x++\n      }\n\n      constructor() {\n            super()\n            this.onclick = this.clicked.bind(this)\n            this.xValue = 0\n      }\n\n      connectedCallback() { \n          \tthis.render()\n      }\n\n      render() {\n            this.textContent = this.x.toString()\n      }\n}\nwindow.customElements.define('num-counter', Counter)\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br")])]),t("p",[s._v("但是在es10以后我们可以使用私有变量进行组件封装,如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("class Counter extends HTMLElement {\n      #xValue = 0\n\n      get #x() { \n          return #xValue\n      }\n      set #x(value) {\n            this.#xValue = value\n            window.requestAnimationFrame(this.#render.bind(this))\n      }\n\n      #clicked() {\n            this.#x++\n      }\n\n      constructor() {\n            super();\n            this.onclick = this.#clicked.bind(this)\n      }\n\n      connectedCallback() { \n          \tthis.#render()\n      }\n\n      #render() {\n            this.textContent = this.#x.toString()\n      }\n}\nwindow.customElements.define('num-counter', Counter)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br")])])])}),[],!1,null,null,null);n.default=e.exports}}]);