(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{370:function(s,n,a){"use strict";a.r(n);var e=a(0),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"原型-prototype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型-prototype"}},[s._v("#")]),s._v(" 原型 prototype")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("我们每创建一个函数，浏览器都会向函数中添加一个属性prototype")])]),s._v(" "),a("li",[a("p",[s._v("这个属性 对应一个对象，这个对象就是我们所谓的原型对象")])]),s._v(" "),a("li",[a("p",[s._v("如果这个函数作为普通函数来调用，那么原型没有任何作用")])]),s._v(" "),a("li",[a("p",[s._v("当函数作为构造函数来调用，它所创建的对象中，都有一个隐含的属性指向构造函数的原型")])]),s._v(" "),a("li",[a("p",[s._v("我们可以通过__proto__来访问隐含属性")])]),s._v(" "),a("li",[a("p",[s._v("原型对象 相当于一个公共的区域，所有该类的实例都可以访问到")])]),s._v(" "),a("li",[a("p",[s._v("我们可以将对象中共有的内容，统一设置到原型对象中")])]),s._v(" "),a("li",[a("p",[s._v("当我们访问对象的一个属性或者方法时，首先会在对象自身中使用，")])]),s._v(" "),a("li",[a("p",[s._v("如果有会直接调用，如果没有则会去原型对象中寻找，有就用")])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function Person() {}\nconsole.log(Person.prototype)\n\nfunction MyClass() {\nthis.a = '我是mc中的a'\n}\nMyClass.prototype.a = 'aaa'; \nvar mc = new MyClass()\nconsole.log(MyClass.prototype)\nconsole.log(mc.__proto__)\nconsole.log(mc.a)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h2",{attrs:{id:"不会污染全局环境"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不会污染全局环境"}},[s._v("#")]),s._v(" 不会污染全局环境")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("MyClass.prototype.sayHello = function () {\nconsole.log('hello')\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"原型链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型链"}},[s._v("#")]),s._v(" 原型链")]),s._v(" "),a("ul",[a("li",[s._v("创建一个构造函数")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function MyGroup() {\n\n}\nMyGroup.prototype.name = \"我是原型中的名字\"\nvar mc = new MyGroup(); \n\n* 使用in检查方法中是否含有某个属性时，如果对象中没有，原型中有 也会返回true\n\nconsole.log('name' in mc)\n\n* 可以使用对象的hasOwnproperty()来检查对象自身中是否含有该属性\n* 使用该方法 只有对象自身中含有该属性时候才会返回true\n* 此方法存在于原型中\n\nconsole.log(mc.hasOwnProperty('name')) -true\nconsole.log(mc.__proto__)\nconsole.log(mc.__proto__.hasOwnProperty('hasOwnProperty')) -false\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("h2",{attrs:{id:"原型对象也是对象，所有它也有原型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型对象也是对象，所有它也有原型"}},[s._v("#")]),s._v(" 原型对象也是对象，所有它也有原型")]),s._v(" "),a("ul",[a("li",[s._v("当我们使用一个对象的属性或者方法时候，会先在自身中寻找")]),s._v(" "),a("li",[s._v("如果自身中有，则直接使用")]),s._v(" "),a("li",[s._v("如果没有则去原型对象中寻找，如果原型对象中有则使用，如果没有则去原型对象的原型上找")]),s._v(" "),a("li",[s._v("直到找到object的原型，object的原型没有原型，如果依然没有找到则会返回undefined")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("console.log(mc.__proto__.__proto__.hasOwnProperty('hasOwnProperty')) -true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);