(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{397:function(s,n,l){"use strict";l.r(n);var o=l(0),t=Object(o.a)({},(function(){var s=this,n=s.$createElement,l=s._self._c||n;return l("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[l("h1",{attrs:{id:"symbol"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#symbol"}},[s._v("#")]),s._v(" symbol")]),s._v(" "),l("p",[s._v("symbol 是一种基于数据类型，sumbol()函数会返回symbol类型的值，该类型具有静态属性和静态方法，他的静态属性会暴露几个内建的成员对象，它的静态方法会暴露全局symbol注册，且类似于内建对象类。\n但作为构造函数来说它并不完整，因为它不支持语法new Symbol()\n每个从symbol()返回的symbol值都是唯一的，一个symbol值能作为对象属性的标识符；这个该数据类型仅有的目的\n例子如下：")]),s._v(" "),l("div",{staticClass:"language- line-numbers-mode"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[s._v("const symbol=Symbol();\nconst symbol2=Symbol(42);\nconst symbol3=Symbol('foo')\n\nconsole.log(typeof symbol);\nconsole.log(symbol.tostring); //symbol foo\nconsole.log(symbol('foo')===symbol('foo')); //false\n\n")])]),s._v(" "),l("div",{staticClass:"line-numbers-wrapper"},[l("span",{staticClass:"line-number"},[s._v("1")]),l("br"),l("span",{staticClass:"line-number"},[s._v("2")]),l("br"),l("span",{staticClass:"line-number"},[s._v("3")]),l("br"),l("span",{staticClass:"line-number"},[s._v("4")]),l("br"),l("span",{staticClass:"line-number"},[s._v("5")]),l("br"),l("span",{staticClass:"line-number"},[s._v("6")]),l("br"),l("span",{staticClass:"line-number"},[s._v("7")]),l("br"),l("span",{staticClass:"line-number"},[s._v("8")]),l("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);